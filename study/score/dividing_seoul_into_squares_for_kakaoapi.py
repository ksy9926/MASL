# -*- coding: utf-8 -*-
"""dividing Seoul into squares for KakaoAPI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NTLbzjAcXvD_KwvSh9p8TWKsn2Tg-lyc
"""

!pip install requests

### API key test ## 
url = "https://dapi.kakao.com/v2/local/geo/coord2regioncode.json?x=127.0016985&y=37.5642135"
headers = {"Authorization": "KakaoAK {}"}.format('2e021e0dbc0637b7c8a74be86c202a11')

import requests
import json
import pandas as pd
api_test = requests.get(url,headers=headers)

url_text = json.loads(api_test.text)

url_text

url_text['documents'][0]['address_name'].split()[0]

!pip install haversine

from haversine import haversine ## 좌표로 거리 구하기

haversine((127.0016985,37.5642135), (127.0106916,37.5642135), unit = 'km')

xx = 0.0089931  ## 경도 x의 1km
yy = 0.0149426 ## 위도 y의 1km

## 서울 특별시의 동서남북 가장 외각 좌표에 해당하는 직사각형 박스를
## 약 1제곱 킬로미터의 정사각형으로 나눈다
## 해당좌표의 시작점이 서울일 경우에만 해당 좌표의 정사각형 꼭지점 좌표를 저장한다

xx = 89931
yy = 149426
## for문을 float형태로 제어할 수 없어서 10^7 씩 곱해줌
seoul = {}
p=0
for x in range(1267340860,1272684117,xx):
  for y in range(374058227,377001904,yy):
    lat = y/10000000   ### 곱해준 10^7로 나눠줌
    lon = x/10000000
    xgap = xx/10000000
    ygap = yy/10000000
    url = "https://dapi.kakao.com/v2/local/geo/coord2regioncode.json?x={0}&y={1}".format(lon,lat)
    headers = {"Authorization": "KakaoAK {}"}.format('2e021e0dbc0637b7c8a74be86c202a11')
    api_test = requests.get(url,headers=headers)
    url_text = json.loads(api_test.text)
   
    if url_text['documents'][0]['address_name'].split()[0]=='서울특별시':
      seoul[p]=[(lat,lon),(lat,lon+xgap),(lat+ygap,lon),(lat+ygap,lon+xgap)] ## 시각화 편의를 위해 y,x 순서로
      p=p+1

## 딕셔너리를 데이터 프레임으로
df = pd.DataFrame(seoul)
df = df.T
df.columns = ['bottom_left','bottom_right','top_left','top_right']
df

lines = df['bottom_left']

#!pip install folium

## 시각화로 데이터를 잘 가져왔는지 확인 

import folium 

m = folium.Map(
    location=[37.5838699,127.0565831],
    zoom_start=10
)

## 서울 행정구역 경계 좌표
with open('/gdrive/My Drive//seoul_municipalities_geo.json',mode='rt',encoding='utf-8') as f:
    geo = json.loads(f.read())
    f.close()
## 행정구역 좌표에 따라 실선 및 채우기
folium.GeoJson(
    geo,
    name='seoul_municipalities'
).add_to(m)

## 구한 좌표의 bottom left를 따라 실선 
folium.PolyLine(
    locations = lines,
    tooltip = 'PolyLine'
).add_to(m)

m.save('map.html')

m