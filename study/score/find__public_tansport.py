# -*- coding: utf-8 -*-
"""find._public_tansport.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O394Lowg6rO91-CszVlO86woHjApBCx5
"""

!pip install haversine

from google.colab import drive
drive.mount('/content/drive')

from haversine import haversine ## 좌표로 거리 구하기 300m

haversine((127.0016985,37.5642135), (127.0016985,37.5686963), unit = 'km')

## 500미터에 해당하는 좌표 차이
xx = 0.0044966
yy = 0.0074714

## 100미터에 해당하는 좌표 차이
xxx = xx/5
yyy = yy/4

# 좌표를 중심으로한 1km^2 사각형의 꼭지점 4개의 좌표 구하기

def square(x,y,xx= 0.0044966,yy=0.0074714):
  s_list = []
  s_list.append([x-xx,y])
  s_list.append([x+xx,y])
  s_list.append([x,y-yy])
  s_list.append([x,y+yy])
  return s_list

square(127.0016985,37.5642135)

import pandas as pd
df = pd.read_csv('/content/drive/My Drive/elice_miniProject/metro_station_seoul.csv', encoding="cp949")

df

del df['Unnamed: 0'] ## 필요 없는 열 삭제

df['station_num'] = '' ## 호선 번호 열 생성

## 역 이름에서 역이름, 호선 번호로 열 분리
de = []
for i in range(len(df['metro_station_name'])):
  try:
    df['station_num'][i]=df['metro_station_name'][i].split()[1]
    df['metro_station_name'][i]=df['metro_station_name'][i].split()[0]
  except:
    de.append(i) ## 호선 정보가 없는 행 번호

print(de)

de.sort(reverse=True)
de

## 호선 정보가 없는 열 삭제 후 인덱스 번호 초기화

for i in range(len(de)):
  df.drop(df.index[i],inplace=True)
df.reset_index(drop=True, inplace=True)

df

## 호선별 지하철역을 빠르게 구하기 위해 딕셔너리로
## idx로 호선별 index번호 추가 

metro = {}
for i in range(len(df['metro_station_name'])):
  if df['station_num'][i] in metro:
    idx = len(metro[df['station_num'][i]])
    a = {idx:[df['metro_station_name'][i],(df['metro_geo_lng'][i],df['metro_geo_lat'][i])]}
    metro[df['station_num'][i]].append(a)
    
  else:
    idx = 0 
    a = {idx:[df['metro_station_name'][i],(df['metro_geo_lng'][i],df['metro_geo_lat'][i])]}
    metro[df['station_num'][i]]=[a]

metro['2호선'][0]

metro['2호선'][0][0]

metro['2호선'][0][0][1][0], metro['2호선'][0][0][1][1] ## 서울대 입구역의 x, y 좌표

a = square(metro['2호선'][0][0][1][0],metro['2호선'][0][0][1][1])
a

metro['2호선'][0][0][1][0],metro['2호선'][0][0][1][1]

df.columns = ['name', 'addr','lat','lng','station_num']
df

## 좌표 반경 500미터 내의 지하철 역, 100미터 내의 버스 정류장 찾기

def round500(x,y,df,bus=False): ## x,y좌표 , DataFrame변수명, True == 버스, False == 지하철

  box = square(x,y) # 위치 좌표를 중심으로한 1km^2 정사각형의 꼭지점 4개의 좌표 구하기

  station = []
  left_x = box[0][0] # 좌측 x좌표
  right_x = box[1][0] # 우측 x좌표
  low_y = box[2][1] # 하단 y좌표
  hight_y = box[3][1] # 상단 y좌표
  result = []

  df = df.sort_values(by=["lng", "lat"], ascending=[True, True])  ## x좌표 기준으로 데이터 프레임 sorting
  df.reset_index(drop=True, inplace=True)

  for i in range(len(df['name'])): 
    if df['lng'][i] >=  right_x: ## x가 범위 500m 좌표 내에 없을 시 break
      break

    if df['lng'][i] >= left_x and df['lng'][i] < right_x  and df['lat'][i] >= low_y and df['lat'][i] < hight_y:
      station.append(i) ## 구해놓은 꼭지점 내에 해당하는 역의 index번호를 station 리스트에 저장
  
  for i in station: ## 1km^2 범위 내에서 선택한 위치를 중심으로 반경 내의 역만

    if bus==True: ## 버스면 100미터 지하철은 500미터
      distance = 0.1
    else:
      distance = 0.5
    if abs(haversine((df['lng'][i],df['lat'][i]), (x, y), unit = 'km')) <= distance:
      result.append(i)
  return result

round500(metro['2호선'][0][0][1][0],metro['2호선'][0][0][1][1],df) ## 서울대입구 역 반경 500미터 내의 지하철 역 찾기

df['name'][123]

df = df.sort_values(by=["lng", "lat"], ascending=[True, True])  ## 함수와 같이 sorting
df.reset_index(drop=True, inplace=True)
df['station_num'][123] ## 서울대입구 역 반경 500m에는 사당역 말고 없는듯

print(metro[df['station_num'][161]]) ## metro에서 2호선의 모든 역 보기

##해당 역의 호선 내 모든 역을 중심으로하는 1km^2 정사각형의 꼭지점 

def all_station(df_index):
  all = []
  for i in range(len(metro[df['station_num'][df_index]])):
    all.append(square(metro[df['station_num'][df_index]][i][i][1][0],metro[df['station_num'][df_index]][i][i][1][1]))
  return all

print(all_station(161)) # 2호선 모든 역의 정사각형 좌표

print(metro[df['station_num'][161]])

df2 = pd.read_csv('/content/drive/My Drive/elice_miniProject/bus_stop_seoul.csv', encoding="cp949")

df2

del df2['Unnamed: 0']

len(round500(metro['2호선'][0][0][1][0],metro['2호선'][0][0][1][1],df))

box = square(metro['2호선'][0][0][1][0],metro['2호선'][0][0][1][1])
box

df2.columns = ['name', 'standard_id','ars_id','lat','lng']
df2

round500(metro['2호선'][0][0][1][0],metro['2호선'][0][0][1][1],df2,True)

len(round500(127.952645104944, 38.481152663184396,df))

## 버스정류장

def all_bus_stop(df2,df_index): 
  return square(df2['lng'][df_index],df2['lat'][df_index])

all_bus_stop(4371)

# 500미터 내의 치하철, 100미터 내의 버스정류장 모두 찾기

def result(x,y,df_metro,df_bus):
  result = []

  metro = round500(x,y,df_metro) ## 반경 100미터 지하철역 찾기
  for station in metro:
    result = result + all_station(station)

  bus = round500(x,y,df_bus,True) ##반경 100미터 버스정류장 찾기
  for stop in bus:
    result += all_bus_stop(stop)
  
  return result

print(result(metro['2호선'][0][0][1][0],metro['2호선'][0][0][1][1],df,df2))

df3 = pd.read_csv('/content/drive/My Drive/elice_miniProject/bus_line.csv', encoding="cp949")

df3.columns = ['standard_id','line_name','num','section_id','bus_stop_id','ars_id','name_y','lat_y','lng_y']

df3

df2

merge = pd.merge(df2, df3,
 how='inner',
 on='ars_id')

merge

## 버스 번호로 검색이 가능한 딕셔너리
bus = {}
for i in range(len(merge['ars_id'])):

  if merge['line_name'][i] in bus:
    idx = len(bus[merge['line_name'][i]])
    a = [merge['ars_id'][i],(merge['lng'][i],merge['lat'][i])]
    bus[merge['line_name'][i]].append(a)
    
  else:
    idx = 0 
    a = [ merge['ars_id'][i],(merge['lng'][i],merge['lat'][i])]
    bus[merge['line_name'][i]]=[a]

## 버스 정류장 번호로 검색 가능한 딕셔너리

bus2 = {}
for i in range(len(merge['ars_id'])):

  if merge['ars_id'][i] in bus2:
    idx = len(bus2[merge['ars_id'][i]])
    a = [merge['line_name'][i],(merge['lng'][i],merge['lat'][i])]
    bus2[merge['ars_id'][i]].append(a)
    
  else:
    idx = 0 
    a = [merge['line_name'][i],(merge['lng'][i],merge['lat'][i])]
    bus2[merge['ars_id'][i]]=[a]

round500(metro['2호선'][0][0][1][0],metro['2호선'][0][0][1][1],merge,True) ## 서울대입구역 근처 100미터 내 버스정류장의 인덱스

metro['2호선'][0]

merge['ars_id'][13611] ## 서울대입구역 근처 인덱스13611번의 버스정류장 번호

bus2[merge['ars_id'][13611]][0][0]

bus2[merge['ars_id'][13611]][0][0] ## ars_id 12254 버스정류장의 인덱스 0번 버스 번호



print(bus[bus2[merge['ars_id'][13611]][0][0]]) ## 7022번 버스가 다니는 버스 노선의 버스 정류장 번호

bus[bus2[merge['ars_id'][13611]][0][0]][0]

bus[bus2[merge['ars_id'][13611]][0][0]][0][1][0],bus[bus2[merge['ars_id'][13611]][0][0]][0][1][1] ## 7022번 버스 노선 인덱스 0번 (1102)정류장의 좌표

## 버스정류장 좌표 근처 
ars = []
for i in range(len(bus[bus2[merge['ars_id'][13611]][0][0]])):
  ars.append(square(bus[bus2[merge['ars_id'][13611]][0][0]][i][1][0],bus[bus2[merge['ars_id'][13611]][0][0]][i][1][1],xxx,yyy))

print(ars)

## 좌표 내 100미터의 버스정류장 찾고
## 해당 정류장의 버스들의 노선에 있는 버스 정류장을 중심으로 하는 100m^2 정사각형 범위의 꼭지점 좌표구하기

def all_bus_line(x,y,df=merge):
  r500 = round500(x, y, df,True) ## 좌표 내 100미터 주변 버스정류장의 df 인덱스 리스트
  for stop in r500: 
    bus_id = df['ars_id'][stop] ## 인덱스에 해당하는 버스정류장 id
    bus_list=bus2[merge['ars_id'][bus_id]] ## 버스정류장 id에 해당하는 버스 번호 리스트
    for bus_nums in bus_list:
      lines=bus[bus_nums[0]] ## 버스 번호에 해당하는 노선 전체의 버스 정류장 id 리스트
      for line in lines: 
        result.append(square(line[1][0],line[1][1],xxx,yyy)) ## 버스정류장을 중심으로 하는 100m^2의 정사각형 범위의 좌표
        break
  return result

all_bus_line(metro['2호선'][0][0][1][0],metro['2호선'][0][0][1][1])[:5]

